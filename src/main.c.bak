#include "main.h"
#include <stdlib.h>
#include <errno.h>
#include <arpa/inet.h>

#include <sys/ioctl.h>

#include <sys/time.h>
#include <net/if.h>
#include <sys/socket.h>
#include <linux/if_packet.h>
#include <linux/if_ether.h>
#include <linux/if_arp.h>

#define MAXDEV	16		/* Maximum number of interfaces */


struct ifconf	ifc;		
struct ifreq	ifr[ MAXDEV ];
struct ifreq	ethreq;
int	sock, pkt_num;
char devname[ IFNAMSIZ ];	
int 	ifindex;		
int	packet_limit = 100;	
const char *pktype[] = { "incoming", "broadcast", "multicast", "otherhost",
			"outgoing", "loopback", "fastroute", "??" };	



static int get_iface_index(int fd, const char *device)
{
    struct ifreq ifr;

    memset(&ifr, 0, sizeof(ifr));
    strncpy (ifr.ifr_name, device, sizeof(ifr.ifr_name) - 1);
    ifr.ifr_name[sizeof(ifr.ifr_name)-1] = '\0';

    if (ioctl(fd, SIOCGIFINDEX, &ifr) == -1)
    {
        return (-1);
    }

    return ifr.ifr_ifindex;
}

int raw_sock(void)
{
    int s = 0;
    s = socket(AF_PACKET, SOCK_RAW, htons(ETH_P_ALL));
    if (s == -1)
    {
        printf ("Unable to create socket(): %s\n", strerror(errno));
        exit(1);
    }
    else
        return s;
}


int main (int argc, char * argv[])
{
    int j;
    int device_index = 1;

    /*socketdescriptor*/
    int s;

    /*target address*/
    struct sockaddr_ll socket_address;

    /*buffer for ethernet frame*/
    void* buffer = (void*)malloc(ETH_FRAME_LEN);
     
    /*pointer to ethenet header*/
    unsigned char* etherhead = buffer;
        
    /*userdata in ethernet frame*/
    unsigned char* data = buffer + 14;
        
    /*another pointer to ethernet header*/
    struct ethhdr *eh = (struct ethhdr *)etherhead;
     
    int send_result = 0;

    /*our MAC address*/ /* eth0: 00:1B:21:5D:35:14 */
    unsigned char src_mac[6] = {0x00, 0x1B, 0x21, 0x5D, 0x35, 0x14};

    /*other host MAC address*/
    unsigned char dest_mac[6] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};

    /*prepare sockaddr_ll*/

    /*RAW communication*/
    socket_address.sll_family   = PF_PACKET;    
    /*we don't use a protocoll above ethernet layer
      ->just use anything here*/
    socket_address.sll_protocol = htons(ETH_P_ALL);  

    /*index of the network device
    see full code later how to retrieve it*/
    socket_address.sll_ifindex = device_index;
    printf ("Selected device index is: %d\n", device_index);

    /*ARP hardware identifier is ethernet*/
    socket_address.sll_hatype   = ARPHRD_ETHER;
        
    /*target is another host*/
    socket_address.sll_pkttype  = PACKET_OTHERHOST;

    /*address length*/
    socket_address.sll_halen    = ETH_ALEN;     
    /*MAC - begin*/
    socket_address.sll_addr[0]  = 0xFF;     
    socket_address.sll_addr[1]  = 0xFF;     
    socket_address.sll_addr[2]  = 0xFF;
    socket_address.sll_addr[3]  = 0xFF;
    socket_address.sll_addr[4]  = 0xFF;
    socket_address.sll_addr[5]  = 0xFF;
    /*MAC - end*/
    socket_address.sll_addr[6]  = 0x00;/*not used*/
    socket_address.sll_addr[7]  = 0x00;/*not used*/


    /*set the frame header*/
    memcpy((void*)buffer, (void*)dest_mac, ETH_ALEN);
    memcpy((void*)(buffer+ETH_ALEN), (void*)src_mac, ETH_ALEN);
    eh->h_proto = 0x00;
    /*fill the frame with some data*/
    for (j = 0; j < 1500; j++) {
        data[j] = (unsigned char)((int) (255.0*rand()/(RAND_MAX+1.0)));
    }

    s = raw_sock();

    /*send the packet*/

    while (1)
    {
	    send_result = sendto(s, buffer, ETH_FRAME_LEN, 0, 
		      (struct sockaddr*)&socket_address, sizeof(socket_address));
	    if (send_result == -1) 
	    { 
		printf ("Error in sendto(): %s\n", strerror(errno));
		exit (1);
	    }
    }

    return EXIT_CODE_GOOD;
}
